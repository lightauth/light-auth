{"version":3,"file":"index.js","sources":["../../../../light-auth-core/dist/client/index.mjs","../../../../light-auth-express/dist/client/index.mjs","../../../lib/auth-client.ts","../../../lib/login.ts"],"sourcesContent":["/*! @light-auth/core v0.0.8 2025-05-21 */\n'use client';\n\nconst DEFAULT_BASE_PATH = \"/api/auth\";\n\n/** Resolves the basePath, defaults to \"/api/default\" if not provided or falsy */\nfunction resolveBasePath(config) {\n    let resolvedBasePath = config?.basePath || config?.env?.[\"LIGHT_AUTH_BASE_PATH\"] || DEFAULT_BASE_PATH;\n    if (!resolvedBasePath.startsWith(\"/\"))\n        resolvedBasePath = `/${resolvedBasePath}`;\n    // Ensure the base path does not end with \"/\"\n    if (resolvedBasePath.endsWith(\"/\"))\n        resolvedBasePath = resolvedBasePath.slice(0, -1);\n    // Ensure the base path does not contain double slashes\n    if (resolvedBasePath.includes(\"//\"))\n        resolvedBasePath = resolvedBasePath.replace(/\\/\\//g, \"/\");\n    return resolvedBasePath;\n}\n\n/**\n * this function is used to make a request to the light auth server\n * it can be done from the server side or the client side\n *\n * it will use the router to get the url and the headers (if server side)\n */\nasync function internalFetch(args) {\n    const { config, body, method = \"GET\" } = args;\n    const { router } = config;\n    // check if we are on the server side or client side\n    // if we are on the server side, we need to use the router to get the url and headers\n    // if we are on the client side, we can use the window object to get the url and headers\n    const isServerSide = typeof window === \"undefined\";\n    const bodyBytes = body ? new TextEncoder().encode(body.toString()) : undefined;\n    // get all the headers from the request\n    let requestHeaders = null;\n    if (router && isServerSide)\n        requestHeaders = await router.getHeaders(args);\n    // get the full url from the router if available\n    let url = args.endpoint;\n    if (router && isServerSide)\n        url = await router.getUrl(args);\n    const request = bodyBytes\n        ? new Request(url.toString(), { method: method, headers: requestHeaders ?? new Headers(), body: bodyBytes })\n        : new Request(url.toString(), { method: method, headers: requestHeaders ?? new Headers() });\n    let response = null;\n    try {\n        response = await fetch(request);\n    }\n    catch (error) {\n        console.error(\"Error:\", error);\n        throw new Error(`light-auth: Request failed with error ${error}`);\n    }\n    if (!response || !response.ok) {\n        throw new Error(`light-auth: Request failed with status ${response?.status}`);\n    }\n    const contentType = response.headers.get(\"Content-Type\");\n    if (contentType && contentType.includes(\"application/x-www-form-urlencoded\")) {\n        const formResponse = await response.text();\n        const formData = new URLSearchParams(formResponse);\n        const result = {};\n        for (const [key, value] of formData.entries()) {\n            result[key] = value;\n        }\n        return result;\n    }\n    if (contentType && (contentType.includes(\"application/json\") || contentType.includes(\"text/plain\"))) {\n        const jsonResponse = await response.json();\n        return jsonResponse;\n    }\n    if (contentType && contentType.includes(\"application/octet-stream\")) {\n        const blobResponse = await response.blob();\n        return blobResponse;\n    }\n    return null;\n}\n\nasync function getCsrfToken(args) {\n    const isServerSide = typeof window === \"undefined\";\n    if (isServerSide)\n        return;\n    const { config } = args;\n    // Get a csrf token from the server\n    const endpoint = `${config.basePath}/csrf`;\n    const csrfToken = await internalFetch({ endpoint, method: \"POST\", ...args });\n    if (!csrfToken)\n        throw new Error(\"light-auth: Failed to get csrf token\");\n    // Check if the csrf token cookie, called light_auth_csrf_token exist\n    const csrfTokenCookie = document.cookie.split(\"; \").find((row) => row.startsWith(\"light_auth_csrf_token=\"));\n    if (csrfTokenCookie)\n        window.document.cookie = `light_auth_csrf_token=; path=/; max-age=0;`;\n    // Set the csrf token in the cookie store\n    window.document.cookie = `light_auth_csrf_token=${csrfToken.csrfTokenHash}.${csrfToken.csrfToken}; path=/; secure=true}`;\n}\n\nfunction createSigninClientFunction(config) {\n    return async (args = {}) => {\n        const { providerName, callbackUrl = \"/\" } = args;\n        // check if we are on the server side or client side\n        const isServerSide = typeof window === \"undefined\";\n        if (isServerSide)\n            throw new Error(\"light-auth-client: signin function should not be called on the server side\");\n        // Get a csrf token from the server and set it in the cookie store\n        await getCsrfToken({ config, ...args });\n        window.location.href = `${config.basePath}/login/${providerName}?callbackUrl=${encodeURIComponent(callbackUrl)}`;\n    };\n}\nfunction createSignoutClientFunction(config) {\n    return async (args = {}) => {\n        const { revokeToken = true, callbackUrl = \"/\" } = args;\n        const isServerSide = typeof window === \"undefined\";\n        if (isServerSide)\n            throw new Error(\"light-auth-client: signout function should not be called on the server side\");\n        // Get a csrf token from the server and set it in the cookie store\n        await getCsrfToken({ config, ...args });\n        window.location.href = `${config.basePath}/logout?revokeToken=${revokeToken}&callbackUrl=${encodeURIComponent(callbackUrl)}`;\n    };\n}\nfunction createFetchSessionClientFunction(config) {\n    return async (args) => {\n        try {\n            const isServerSide = typeof window === \"undefined\";\n            if (isServerSide)\n                throw new Error(\"light-auth-client: signout function should not be called on the server side\");\n            // get the session from the server using the api endpoint\n            const session = await internalFetch({ config, method: \"POST\", endpoint: `${config.basePath}/session`, ...args });\n            return session;\n        }\n        catch (error) {\n            console.error(\"Error:\", error);\n            return null;\n        }\n    };\n}\nfunction createFetchUserClientFunction(config) {\n    return async (args) => {\n        try {\n            const isServerSide = typeof window === \"undefined\";\n            if (isServerSide)\n                throw new Error(\"light-auth-client: getUser function should not be called on the server side\");\n            // get the user from the server using the api endpoint\n            const session = await internalFetch({ config, method: \"POST\", endpoint: `${config.basePath}/session`, ...args });\n            if (!session || !session.userId)\n                return null;\n            // get the user from the user adapter\n            const user = await internalFetch({ config, method: \"POST\", endpoint: `${config.basePath}/user/${session.userId}`, ...args });\n            if (!user)\n                return null;\n            return user;\n        }\n        catch (error) {\n            console.error(\"light-auth: Error in createLightAuthUserFunction:\", error);\n            return null;\n        }\n    };\n}\n\nexport { DEFAULT_BASE_PATH, createFetchSessionClientFunction, createFetchUserClientFunction, createSigninClientFunction, createSignoutClientFunction, resolveBasePath };\n//# sourceMappingURL=index.mjs.map\n","/*! @light-auth/express v0.0.8 2025-05-21 */\n'use client';\n\nimport { createFetchSessionClientFunction, createFetchUserClientFunction, createSigninClientFunction, createSignoutClientFunction, resolveBasePath } from '@light-auth/core/client';\n\nconst createExpressLightAuthSessionFunction = (config) => {\n    const sessionFunction = createFetchSessionClientFunction(config);\n    return async () => await sessionFunction();\n};\nconst createExpressLightAuthUserFunction = (config) => {\n    const userFunction = createFetchUserClientFunction(config);\n    return async () => await userFunction();\n};\nfunction createExpressSigninFunction(config) {\n    const signInFunction = createSigninClientFunction(config);\n    return async (providerName, callbackUrl = \"/\") => await signInFunction({ providerName, callbackUrl });\n}\nfunction createExpressSignoutFunction(config) {\n    const signOutFunction = createSignoutClientFunction(config);\n    return async (revokeToken = false, callbackUrl = \"/\") => await signOutFunction({ revokeToken, callbackUrl });\n}\nfunction CreateLightAuthClient(config) {\n    // @ts-ignore\n    config.env = config.env || import.meta;\n    config.basePath = resolveBasePath(config);\n    return {\n        basePath: config.basePath,\n        getSession: createExpressLightAuthSessionFunction(config),\n        getUser: createExpressLightAuthUserFunction(config),\n        signIn: createExpressSigninFunction(config),\n        signOut: createExpressSignoutFunction(config),\n    };\n}\n\nexport { CreateLightAuthClient, createExpressLightAuthSessionFunction, createExpressLightAuthUserFunction, createExpressSigninFunction, createExpressSignoutFunction };\n//# sourceMappingURL=index.mjs.map\n",null,null],"names":["DEFAULT_BASE_PATH","createExpressLightAuthSessionFunction","config","sessionFunction","createFetchSessionClientFunction","createExpressLightAuthUserFunction","userFunction","createFetchUserClientFunction","createExpressSigninFunction","signInFunction","createSigninClientFunction","providerName","callbackUrl","createExpressSignoutFunction","signOutFunction","createSignoutClientFunction","revokeToken","CreateLightAuthClient","env","import","basePath","resolveBasePath","getSession","getUser","signIn","signOut"],"mappings":";;;;;IAGM,MAAAA,iBAAiB,GAAG,WAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICQb,MAAAC,qCAAqC,GAIhDC,MAAsC,IACpC;IACF,EAAA,MAAMC,eAAe,GAAGC,gCAAgC,CAACF,MAAM,CAAC,CAAA;MAChE,OAAO,YAAY,MAAMC,eAAe,EAAE,CAAA;IAC5C,CAAA,CAAA;IAEa,MAAAE,kCAAkC,GAI7CH,MAAsC,IACpC;IACF,EAAA,MAAMI,YAAY,GAAGC,6BAA6B,CAACL,MAAM,CAAC,CAAA;MAC1D,OAAO,YAAY,MAAMI,YAAY,EAAE,CAAA;IACzC,CAAA,CAAA;IAEM,SAAUE,2BAA2BA,CACzCN,MAAsC,EAAA;IAEtC,EAAA,MAAMO,cAAc,GAAGC,0BAA0B,CAACR,MAAM,CAAC,CAAA;MACzD,OAAO,OAAOS,YAAoB,EAAEC,WAAsB,MAAG,KAAK,MAAMH,cAAc,CAAC;QAAEE,YAAY;IAAEC,IAAAA,WAAAA;IAAW,GAAE,CAAC,CAAA;IACvH,CAAA;IAEM,SAAUC,4BAA4BA,CAC1CX,MAAsC,EAAA;IAEtC,EAAA,MAAMY,eAAe,GAAGC,2BAA2B,CAACb,MAAM,CAAC,CAAA;MAC3D,OAAO,OAAOc,WAAA,GAAuB,KAAK,EAAEJ,WAAA,GAAsB,GAAG,KAAK,MAAME,eAAe,CAAC;QAAEE,WAAW;IAAEJ,IAAAA,WAAAA;IAAW,GAAE,CAAC,CAAA;IAC/H,CAAA;IAEM,SAAUK,qBAAqBA,CACnCf,MAAsC,EAAA;;MAGtCA,MAAM,CAACgB,GAAG,GAAGhB,MAAM,CAACgB,GAAG,IAAIC,4KAAW,CAAA;IACtCjB,EAAAA,MAAM,CAACkB,QAAQ,GAAGC,eAAe,CAACnB,MAAM,CAAC,CAAA;MAEzC,OAAO;QACLkB,QAAQ,EAAElB,MAAM,CAACkB,QAAQ;IACzBE,IAAAA,UAAU,EAAErB,qCAAqC,CAACC,MAAM,CAAC;IACzDqB,IAAAA,OAAO,EAAElB,kCAAkC,CAACH,MAAM,CAAC;IACnDsB,IAAAA,MAAM,EAAEhB,2BAA2B,CAACN,MAAM,CAAC;QAC3CuB,OAAO,EAAEZ,4BAA4B,CAACX,MAAM,CAAA;IAC7C,GAAA,CAAA;IACH;;ICzDO,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,qBAAqB,CAAC;IAC5E,IAAA,QAAQ,EAAE,WAAW;IACtB,CAAA,CAAC;;ICFF,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,YAAA;QAC5C,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QACrD,IAAI,QAAQ,EAAE;IACZ,QAAA,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAU,KAAK,EAAA;gBAChD,KAAK,CAAC,cAAc,EAAE,CAAC;IACvB,YAAA,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;gBAChC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACnB,SAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC;;;;;;"}